/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* auto generate by HHB_VERSION "2.3.0" */

#_hhb_header_files_#
#include <pthread.h>

#_hhb_macro_def_#

struct thread_args {
    int deviceIndex;
    int argc;
    char **argv;
};

#_hhb_function_decl_#

#_hhb_global_var_decl_#

#_hhb_preprocess_def_#

#_hhb_utils_def_#

#_hhb_postprocess_def_#

volatile int initNum = 0;
volatile int deviceCount = 0;

volatile float total_time = 0.f;
volatile float total_fps = 0.f;
volatile int loop_time = 100;

void *create_graph(char *params_path) {
    char *suffix = params_path + (strlen(params_path) - 3);
    if (strcmp(suffix, ".nb") == 0) {
        // create binary graph
        return csinn_nbg(params_path, device_index);
    }

    char *params = get_binary_from_file(params_path, NULL);
    suffix = params_path + (strlen(params_path) - 7);
    if (strcmp(suffix, ".params") == 0) {
        // create general graph
        return csinn_(params, device_index);
    }

    suffix = params_path + (strlen(params_path) - 3);
    if (strcmp(suffix, ".bm") == 0) {
        return csinn_(params + 8192, device_index);
    } else {
        return NULL;
    }
}

static void full_network(void *thread_args) {
    char **data_path = NULL;
    int input_num = #_input_num#;
    int output_num = #_output_num#;
    int input_group_num = 1;
    int i;

    struct thread_args *targs = (struct thread_args*)thread_args;
    int argc = targs->argc;
    char **argv = targs->argv;
    int device_index = targs->deviceIndex;

    if (argc < (2 + input_num)) {
        printf("Please set valide args: ./model.elf model.params "
                "[tensor1/image1 ...] [tensor2/image2 ...]\n");
        return;
    } else {
        if (argc == 3 && get_file_type(argv[2]) == FILE_TXT) {
            data_path = read_string_from_file(argv[2], &input_group_num);
            input_group_num /= input_num;
        } else {
            data_path = argv + 2;
            input_group_num = (argc - 2) / input_num;
        }
    }

    while(1) {
        sleep(1);
        if (initNum == device_index) break;
    }

    void *sess = create_graph(argv[1]);

    initNum ++;
    while(1) {
        sleep(1);
        if(initNum == deviceCount) break;
    }

    struct csinn_tensor* input_tensors[input_num];
    #_tensor_shape_#
    float *inputf[input_num];
    uint8_t *input[input_num];
    char filename_prefix[FILE_LENGTH] = {0};

    float thread_total_time = 0;
    uint64_t start_time, end_time;
    loop_time = input_group_num;
    for (i = 0; i < input_group_num; i++) {
        /* set input */
        printf("%d-th thread, %d-th input:\n", device_index, i);
        for (int j = 0; j < input_num; j++) {
            #_get_input_data_stats_#
            input_tensors[j]->data = shl_ovx_input_f32_to_u8(j, inputf[j], sess);
        }

        start_time = shl_get_timespec();
        csinn_update_input_and_run(input_tensors, sess);
        end_time = shl_get_timespec();

        thread_total_time += (((float)(end_time - start_time)) / 1000000);
        total_time += (((float)(end_time - start_time)) / 1000000);

        snprintf(filename_prefix, FILE_LENGTH, "%s", basename(data_path[i * input_num]));
        postprocess(sess, filename_prefix);

        for (int j = 0; j < input_num; j++) {
            shl_mem_free(inputf[j]);
            shl_mem_free(input_tensors[j]->data);
        }
    }

    printf("%d-th thread run graph average execution time: %.5fms, FPS=%.2f\n", device_index, thread_total_time / input_group_num,
                    1000.0/(thread_total_time / input_group_num));

    total_fps += 1000.0/(thread_total_time / input_group_num);

    for (int j = 0; j < input_num; j++) {
        csinn_free_tensor(input_tensors[j]);
    }

    csinn_session_deinit(sess);
    csinn_free_session(sess);
}

int main(int argc, char **argv) {
    int i=0;
    struct thread_args targs[8];

    deviceCount = shl_ovx_get_device_number();
    printf("deviceCount = %d\n",deviceCount);

    if(argc == 4 )
    {
       int num = atoi(argv[3]);
       if(num<deviceCount)
          deviceCount= num;
      printf("change deviceCount as %d\n",deviceCount);
	  argc--;
    }

    printf("start initial...\n");

    {
        int ret[8];
        pthread_t thread[8];
        for(i=0;i<deviceCount;i++)
        {
            targs[i].deviceIndex = i;
            targs[i].argc = argc;
            targs[i].argv = argv;
            ret[i] = pthread_create(&thread[i], NULL, (void *)&full_network, (void *)(&targs[i]));
        }
        for(i=0;i<deviceCount;i++)
            pthread_join(thread[i], NULL);
    }

    printf("Total FPS=%.2f (sum average fps of every thread...)\n", total_fps);

    printf("All threads run graph average execution time: %.5fms, FPS=%.2f\n", total_time / deviceCount / loop_time,
                    1000.0/(total_time / deviceCount / loop_time) * deviceCount);

    return 0;
}
